name: "monitoring"

services:
  prometheus:
    image: prom/prometheus:v3.4.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/rules:/etc/prometheus/rules
      - ./prometheus/files_sd:/etc/prometheus/files_sd
      - ./prometheus/web.yml:/etc/prometheus/web.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.config.file=/etc/prometheus/web.yml'
    restart: unless-stopped
    networks:
      - network1

  # node_exporter:
  #   image: prom/node-exporter:v1.9.1
  #   container_name: node_exporter
  #   ports:
  #     - 9100:9100
  #   volumes:
  #     - /proc:/host/proc:ro
  #     - /sys:/host/sys:ro
  #     - /:/rootfs:ro
  #   command:
  #     - '--path.rootfs=/rootfs'
  #     - '--path.procfs=/host/proc' 
  #     - '--path.sysfs=/host/sys'
  #     - --collector.filesystem.ignored-mount-points
  #     - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
  #   restart: unless-stopped
  #   networks:
  #     - network1

  # shoehub:
  #   image: aussiearef/shoehub:latest
  #   container_name: shoehub
  #   ports:
  #     - 8080:8080
  #   environment:
  #     - JAVA_OPTS=-Xmx512m
  #   restart: unless-stopped
  #   networks: 
  #     - network1

  grafana:
    image: grafana/grafana:12.0.1
    container_name: grafana
    hostname: grafana
    ports:
      - 3000:3000
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
      # - ./grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - ./grafana/.grafana.env
    command: --config=/etc/grafana/grafana.ini
    restart: always
    networks:
      - network1
  
#  loki:
#    image: grafana/loki:3.5
#    container_name: loki
#    ports:
#      - "3100:3100"
#    volumes:
#      - ./loki/loki-config.yaml:/etc/loki/loki-config.yaml
#    command: -config.file=/etc/loki/loki-config.yaml
#    restart: unless-stopped
#    networks:
#      - network1 

#  promtail:
#    image: grafana/promtail:3.5-amd64
#    container_name: promtail
#    volumes:
#      - ./promtail/promtail-config.yaml:/etc/promtail/config.yml
#      - ./log:/var/log
#    command: -config.file=/etc/promtail/config.yml
    # healthcheck:
    #   test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9080/ready"]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 3
#    restart: unless-stopped
#    networks:
#      - network1
  # otel-collector:
  #   image: otel/opentelemetry-collector-contrib:0.127.0
  #   container_name: otel
  #   volumes:
  #     - ./otel_collector/otel-collector-config.yaml:/etc/otelcol-contrib/config.yaml
  #   ports:
  #     - 1888:1888 # pprof extension
  #     - 8888:8888 # Prometheus metrics exposed by the Collector
  #     - 8889:8889 # Prometheus exporter metrics
  #     - 13133:13133 # health_check extension
  #     - 4317:4317 # OTLP gRPC receiver
  #     - 4318:4318 # OTLP http receiver
  #     - 55679:55679 # zpages extension
  #   restart: unless-stopped
  #   networks:
  #     - network1

  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    command: -config.file /etc/tempo-config.yml
    ports:
      - "3100:3100" 
      - "4317:4317"
    volumes:
      - ./tempo/tempo.yml:/etc/tempo-config.yml
    networks:
      - network1
    restart: unless-stopped
    mem_limit: 512m
    mem_reservation: 128M
    cpus: 0.25

networks:
  network1:
    name: docker_network
    external: true


volumes:
  prometheus_data: 
    name: prometheus_data
  grafana_data: 
    name: grafana_data